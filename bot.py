import telebot
from telebot import types
import json
from datetime import datetime, date, time
bot = telebot.TeleBot('5750687344:AAEVWNtI3WGoalFjtuSqWXX1SxxWNmvhNnw')
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
uid = 0
ufname = ''
ulname = ''
uphone = ''
ustat = ''
finded = 0
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
a = telebot.types.ReplyKeyboardRemove()

@bot.message_handler(commands=['start'])

# ====================  –° –¢ –ê –† –¢   –ë –û –¢ –ê  ====================
def send_welcome(message):
    global uid, ufname, ulname, uphone, ustat, finded
    markup = types.ReplyKeyboardRemove()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É.', reply_markup=markup)
    bot.register_next_step_handler(message, start_working)
def start_working(message):
    markup = types.ReplyKeyboardRemove()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
    if message.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' or message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        global uid, ufname, ulname, uphone, ustat
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        usr = open('Users.txt', 'r')
        usrt = usr.read()
        usrj = json.loads(usrt)
        finded = 0
        for users in usrj['response']['users']:
            if int(message.chat.id) == int(users['user_id']):
                finded = 1
                uid = users['user_id']
                ufname = users['user_f_name']
                ulname = users['user_l_name']
                uphone = users['user_phone_num']
                ustat = users['user_status']
                bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {ufname}!\n–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {ustat}.')
                if ustat == 'Manager':
                    markup.row('–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
                    markup.row('–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º')
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...', reply_markup=markup)
                    bot.register_next_step_handler(message, main_menu_manager)
                elif ustat == 'Master':
                    markup.row('–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º')
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...', reply_markup=markup)
                    bot.register_next_step_handler(message, main_menu_master)
        if finded == 0:
            markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.', reply_markup=markup)
            bot.register_next_step_handler(message, reg1)
        usr.close()
    else:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!', reply_markup=markup)
        bot.register_next_step_handler(message, start_working)
# ===============================================================

@bot.message_handler(content_types=['text'])

# ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
def main_menu_manager(Message):
    if Message.text == '–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫':
        now = datetime.now()
        tasksfile = str(now.month) + str(now.year) + '.txt'
        # bot.send_message(Message.chat.id, tasksfile)
        file = open(tasksfile, 'r')
        tasklist = json.loads(file.read())
        for tasks in tasklist['response']['tasks']:
            tnum = tasks['task_id']
            tdate = tasks['task_add_date']
            ttime = tasks['task_add_time']
            tfrom = tasks['task_from']
            tmaster = tasks['master_name']
            tmanagerc = tasks['manager_name_c']
            tstatus = tasks['task_status']
            if tstatus == 1:
                taskmes = 'üîµ' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom)
            elif tstatus == 2:
                taskmes = 'üü°' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom) + ' (' + str(tmaster) + ')'
            elif tstatus == 3:
                taskmes = 'üü¢' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom) + ' (' + str(tmaster) + ')'
            elif tstatus == 4:
                taskmes = 'üî¥' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom) + ' (' + str(tmanagerc) + ')'
            bot.send_message(Message.chat.id, taskmes)
        bot.register_next_step_handler(Message, main_menu_manager)
    elif Message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º':
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–û—Ç–º–µ–Ω–∞')
        bot.send_message(Message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(Message, chat)
    else:
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
        markup.row('–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º')
        bot.send_message(Message.chat.id, '–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–∞.', reply_markup=markup)
        bot.register_next_step_handler(Message, main_menu_manager)
def main_menu_master(Message):
    if Message.text == '–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫':
        now = datetime.now()
        tasksfile = str(now.month) + str(now.year) + '.txt'
        # bot.send_message(Message.chat.id, tasksfile)
        file = open(tasksfile, 'r')
        tasklist = json.loads(file.read())
        for tasks in tasklist['response']['tasks']:
            tnum = tasks['task_id']
            tdate = tasks['task_add_date']
            ttime = tasks['task_add_time']
            tfrom = tasks['task_from']
            tmaster = tasks['master_name']
            tmanagerc = tasks['manager_name_c']
            tstatus = tasks['task_status']
            if tstatus == 1:
                taskmes = 'üîµ' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom)
            elif tstatus == 2:
                taskmes = 'üü°' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom) + ' (' + str(tmaster) + ')'
            elif tstatus == 3:
                taskmes = 'üü¢' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom) + ' (' + str(tmaster) + ')'
            elif tstatus == 4:
                taskmes = 'üî¥' + str(tdate) + ' ' + str(ttime) + ' - ' + str(tfrom) + ' (' + str(tmanagerc) + ')'
            bot.send_message(Message.chat.id, taskmes)
        bot.register_next_step_handler(Message, main_menu_master)
    elif Message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º':
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–û—Ç–º–µ–Ω–∞')
        bot.send_message(Message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(Message, chat)
    else:
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º')
        bot.send_message(Message.chat.id, '–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–∞.', reply_markup=markup)
        bot.register_next_step_handler(Message, main_menu_master)
# ===================================================================

# ==================== –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º ====================
def chat(message):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        sfname = ''
        slname = ''
        usr = open('Users.txt', 'r')
        usrt = usr.read()
        usrj = json.loads(usrt)
        for users in usrj['response']['users']:
            if int(message.chat.id) == int(users['user_id']):
                sfname = users['user_f_name']
                slname = users['user_l_name']
        for users in usrj['response']['users']:
            if int(message.chat.id) != int(users['user_id']):
                bot.send_message(users['user_id'], f"‚ÄºÔ∏è —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ÄºÔ∏è \n –æ—Ç {slname} {sfname} ‚ÄºÔ∏è\n\n{message.text}")
        usr.close()
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=markup)
        bot.register_next_step_handler(message, start_working)
    else:
        markup = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=markup)
        bot.register_next_step_handler(message, start_working)
# =================================================================

# ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
def reg1(Message):
    markup = types.ReplyKeyboardRemove()
    if Message.chat.type == 'private':
        if Message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
            bot.send_message(Message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è.', reply_markup=a)
            bot.register_next_step_handler(Message, reg2)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
            bot.send_message(Message.chat.id, f'–Ω–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥', reply_markup=markup)
            bot.register_next_step_handler(Message, reg1)
def reg2(message):
    global uid, ufname, ulname, uphone, ustat
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –§–∞–º–∏–ª–∏—é.', reply_markup=a)
    if message.chat.type == 'private':
        ufname = message.text
        bot.register_next_step_handler(message, reg3)
def reg3(message):
    global uid, ufname, ulname, uphone, ustat
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–≤ —Ñ–æ—Ä–º–∞—Ç–µ +99897 XXX XX XX', reply_markup=a)
    if message.chat.type == 'private':
        ulname = message.text
        bot.register_next_step_handler(message, reg4)
def reg4(message):
    global uid, ufname, ulname, uphone, ustat
    markup = types.ReplyKeyboardRemove()
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ú–∞—Å—Ç–µ—Ä')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞.', reply_markup=markup)
        uphone = message.text
        bot.register_next_step_handler(message, reg5)
def reg5(message):
    global uid, ufname, ulname, uphone, ustat
    markup = types.ReplyKeyboardRemove()
    if message.chat.type == 'private':
        if message.text == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            ustat = 'Manager'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('–î–∞', '–ù–µ—Ç')
            bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n'
                            f'–ò–º—è: {ufname}\n'
                            f'–§–∞–º–∏–ª–∏—è: {ulname}\n'
                            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {uphone}\n'
                            f'–°—Ç–∞—Ç—É—Å: {ustat}\n\n'
                            f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=markup)
            bot.register_next_step_handler(message, reg6)
        elif message.text == '–ú–∞—Å—Ç–µ—Ä':
            ustat = 'Master'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('–î–∞', '–ù–µ—Ç')
            bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n'
                            f'–ò–º—è: {ufname}\n'
                            f'–§–∞–º–∏–ª–∏—è: {ulname}\n'
                            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {uphone}\n'
                            f'–°—Ç–∞—Ç—É—Å: {ustat}\n\n'
                            f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=markup)
            bot.register_next_step_handler(message, reg6)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ú–∞—Å—Ç–µ—Ä')
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞.', reply_markup=markup)
            bot.register_next_step_handler(message, reg5)
def reg6(message):
    global uid, ufname, ulname, uphone, ustat
    markup = types.ReplyKeyboardRemove()
    uid = message.chat.id
    if message.chat.type == 'private':
        if message.text == '–î–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            usr = open('Users.txt', 'r')
            usrt = usr.read()
            usrj = json.loads(usrt)
            json_data = {
                'user_id': uid,
                'user_f_name': ufname,
                'user_l_name': ulname,
                'user_phone_num': uphone,
                'user_status': ustat
                }
            usrj['response']['users'].append(json_data)
            for users in usrj['response']['users']:
                bot.send_message(message.chat.id, users['user_f_name'])
                bot.send_message(message.chat.id, users['user_l_name'])
            usr.close()
            nusr = open('Users.txt', 'w')
            nusr.write(json.dumps(usrj, indent=2))
            nusr.close()
            # ======================================
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=markup)
            bot.register_next_step_handler(message, start_working)
        elif message.text == '–ù–µ—Ç':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.')
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è.', reply_markup=a)
            bot.register_next_step_handler(message, reg2)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ.')
            markup.row('–î–∞', '–ù–µ—Ç')
            bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n'
                            f'–ò–º—è: {ufname}\n'
                            f'–§–∞–º–∏–ª–∏—è: {ulname}\n'
                            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {uphone}\n'
                            f'–°—Ç–∞—Ç—É—Å: {ustat}\n\n'
                            f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=markup)
            bot.register_next_step_handler(message, reg6)
# =========================================================================
            
bot.polling(none_stop=True, interval=0)